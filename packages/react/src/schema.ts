import type { ReactNode } from "react";

import type { Values } from "@formity/system";

import type {
  ItemValues,
  FlowValues,
  ListValues,
  CondValues,
  LoopValues,
  SwitchValues,
  FormValues,
  YieldValues,
  ReturnValues,
  VariablesValues,
} from "@formity/system";

import type { Schema as SystemSchema } from "@formity/system";

import type {
  ItemSchema as SystemItemSchema,
  FlowSchema as SystemFlowSchema,
  ListSchema as SystemListSchema,
  CondSchema as SystemCondSchema,
  LoopSchema as SystemLoopSchema,
  SwitchSchema as SystemSwitchSchema,
  FormSchema as SystemFormSchema,
  YieldSchema as SystemYieldSchema,
  ReturnSchema as SystemReturnSchema,
  VariablesSchema as SystemVariablesSchema,
} from "@formity/system";

import type { ModelSchema as SystemModelSchema } from "@formity/system";

import type {
  ModelItemSchema as SystemModelItemSchema,
  ModelFlowSchema as SystemModelFlowSchema,
  ModelListSchema as SystemModelListSchema,
  ModelCondSchema as SystemModelCondSchema,
  ModelLoopSchema as SystemModelLoopSchema,
  ModelSwitchSchema as SystemModelSwitchSchema,
  ModelFormSchema as SystemModelFormSchema,
  ModelYieldSchema as SystemModelYieldSchema,
  ModelReturnSchema as SystemModelReturnSchema,
  ModelVariablesSchema as SystemModelVariablesSchema,
} from "@formity/system";

/**
 * Defines the structure and behavior of a multi-step form.
 *
 * @template V A type extending `Values` that defines the structure of the multi-step form,
 * including the values handled in each phase.
 *
 * @template I An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 *
 * @template P An object type defining the values accessible when rendering each form step in
 * the multi-step process.
 */
export type Schema<
  V extends Values,
  I extends object = object,
  P extends object = object
> = SystemSchema<ReactNode, V, I, P>;

/**
 * Defines the structure and behavior of any element in a multi-step form.
 *
 * @template Values A type extending `ItemValues` that defines the structure of the multi-step form,
 * including the values handled in each phase.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 *
 * @template Params An object type defining the values accessible when rendering each form step in
 * the multi-step process.
 */
export type ItemSchema<
  Values extends ItemValues,
  Inputs extends object,
  Params extends object
> = SystemItemSchema<ReactNode, Values, Inputs, Params>;

/**
 * Defines the structure and behavior of any flow element in a multi-step form.
 *
 * @template Values A type extending `FlowValues` that defines the structure of the multi-step form,
 * including the values handled in each phase.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 *
 * @template Params An object type defining the values accessible when rendering each form step in
 * the multi-step process.
 */
export type FlowSchema<
  Values extends FlowValues,
  Inputs extends object,
  Params extends object
> = SystemFlowSchema<ReactNode, Values, Inputs, Params>;

/**
 * Defines the structure and behavior of a list element in a multi-step form.
 *
 * @template Values A type extending `ListValues` that defines the structure of the multi-step form,
 * including the values handled in each phase.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 *
 * @template Params An object type defining the values accessible when rendering each form step in
 * the multi-step process.
 */
export type ListSchema<
  Values extends ListValues,
  Inputs extends object,
  Params extends object
> = SystemListSchema<ReactNode, Values, Inputs, Params>;

/**
 * Defines the structure and behavior of a condition element in a multi-step form.
 *
 * @template Values A type extending `CondValues` that defines the structure of the multi-step form,
 * including the values handled in each phase.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 *
 * @template Params An object type defining the values accessible when rendering each form step in
 * the multi-step process.
 */
export type CondSchema<
  Values extends CondValues,
  Inputs extends object,
  Params extends object
> = SystemCondSchema<ReactNode, Values, Inputs, Params>;

/**
 * Defines the structure and behavior of a loop element in a multi-step form.
 *
 * @template Values A type extending `LoopValues` that defines the structure of the multi-step form,
 * including the values handled in each phase.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 *
 * @template Params An object type defining the values accessible when rendering each form step in
 * the multi-step process.
 */
export type LoopSchema<
  Values extends LoopValues,
  Inputs extends object,
  Params extends object
> = SystemLoopSchema<ReactNode, Values, Inputs, Params>;

/**
 * Defines the structure and behavior of a switch element in a multi-step form.
 *
 * @template Values A type extending `SwitchValues` that defines the structure of the multi-step
 * form, including the values handled in each phase.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 *
 * @template Params An object type defining the values accessible when rendering each form step in
 * the multi-step process.
 */
export type SwitchSchema<
  Values extends SwitchValues,
  Inputs extends object,
  Params extends object
> = SystemSwitchSchema<ReactNode, Values, Inputs, Params>;

/**
 * Defines the structure and behavior of a form element in a multi-step form.
 *
 * @template Values A type extending `FormValues` that defines the values of the form element.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 *
 * @template Params An object type defining the values accessible when rendering each form step in
 * the multi-step process.
 */
export type FormSchema<
  Values extends FormValues,
  Inputs extends object,
  Params extends object
> = SystemFormSchema<ReactNode, Values, Inputs, Params>;

/**
 * Defines the structure and behavior of a yield element in a multi-step form.
 *
 * @template Values A type extending `YieldValues` that defines the values of the yield element.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 */
export type YieldSchema<
  Values extends YieldValues,
  Inputs extends object
> = SystemYieldSchema<Values, Inputs>;

/**
 * Defines the structure and behavior of a return element in a multi-step form.
 *
 * @template Values A type extending `ReturnValues` that defines the values of the return element.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 */
export type ReturnSchema<
  Values extends ReturnValues,
  Inputs extends object
> = SystemReturnSchema<Values, Inputs>;

/**
 * Defines the structure and behavior of a variables element in a multi-step form.
 *
 * @template Values A type extending `VariablesValues` that defines the values of the variables element.
 *
 * @template Inputs An object type representing additional values available during form execution,
 * beyond those generated by the multi-step form itself.
 */
export type VariablesSchema<
  Values extends VariablesValues,
  Inputs extends object
> = SystemVariablesSchema<Values, Inputs>;

/**
 * Defines the structure and behavior of a multi-step form.
 */
export type ModelSchema = SystemModelSchema<ReactNode>;

/**
 * Defines the structure and behavior of any element in a multi-step form.
 */
export type ModelItemSchema = SystemModelItemSchema<ReactNode>;

/**
 * Defines the structure and behavior of any flow element in a multi-step form.
 */
export type ModelFlowSchema = SystemModelFlowSchema<ReactNode>;

/**
 * Defines the structure and behavior of a list element in a multi-step form.
 */
export type ModelListSchema = SystemModelListSchema<ReactNode>;

/**
 * Defines the structure and behavior of a condition element in a multi-step form.
 */
export type ModelCondSchema = SystemModelCondSchema<ReactNode>;

/**
 * Defines the structure and behavior of a loop element in a multi-step form.
 */
export type ModelLoopSchema = SystemModelLoopSchema<ReactNode>;

/**
 * Defines the structure and behavior of a switch element in a multi-step form.
 */
export type ModelSwitchSchema = SystemModelSwitchSchema<ReactNode>;

/**
 * Defines the structure and behavior of a form element in a multi-step form.
 */
export type ModelFormSchema = SystemModelFormSchema<ReactNode>;

/**
 * Defines the structure and behavior of a yield element in a multi-step form.
 */
export type ModelYieldSchema = SystemModelYieldSchema;

/**
 * Defines the structure and behavior of a return element in a multi-step form.
 */
export type ModelReturnSchema = SystemModelReturnSchema;

/**
 * Defines the structure and behavior of a variables element in a multi-step form.
 */
export type ModelVariablesSchema = SystemModelVariablesSchema;
