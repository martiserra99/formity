"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/expry";
exports.ids = ["vendor-chunks/expry"];
exports.modules = {

/***/ "(ssr)/./node_modules/expry/dist/expry.esm.js":
/*!**********************************************!*\
  !*** ./node_modules/expry/dist/expry.esm.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   expry: () => (/* binding */ expry)\n/* harmony export */ });\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _createForOfIteratorHelperLoose(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (t) return (t = t.call(r)).next.bind(t);\n  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) {\n    t && (r = t);\n    var o = 0;\n    return function () {\n      return o >= r.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: r[o++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nfunction assert(value, check, message) {\n  if (check.some(function (check) {\n    return check(value);\n  })) return;\n  throw new Error(message);\n}\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nfunction isString(value) {\n  return typeof value === \"string\";\n}\nfunction isBoolean(value) {\n  return typeof value === \"boolean\";\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isObject(value) {\n  return value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\nfunction isArrayOfType(check) {\n  return function (value) {\n    return Array.isArray(value) && value.every(function (item) {\n      return check.some(function (check) {\n        return check(item);\n      });\n    });\n  };\n}\n\nvar arithmetic = {\n  /**\r\n   * Returns the absolute value of a number.\r\n   *\r\n   * @param args The number (expression evaluating to a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The absolute value of the number.\r\n   *\r\n   * @example $abs(-5) // 5\r\n   * @example $abs(5) // 5\r\n   */\n  $abs: function $abs(args, vars) {\n    var number = expry(args, vars);\n    assert(number, [isNumber], \"The $abs operator requires a number as argument.\");\n    return Math.abs(number);\n  },\n  /**\r\n   * Adds numbers together.\r\n   *\r\n   * @param args The numbers (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The sum of the numbers.\r\n   *\r\n   * @example $add([1, 2, 3]) // 6\r\n   * @example $add([1, 2, 3, 4]) // 10\r\n   */\n  $add: function $add(args, vars) {\n    return args.reduce(function (acc, expr) {\n      var number = expry(expr, vars);\n      assert(number, [isNumber], \"The $add operator requires numbers as arguments.\");\n      return acc + number;\n    }, 0);\n  },\n  /**\r\n   * Returns the smallest integer greater than or equal to the specified number.\r\n   *\r\n   * @param args The number (expression evaluating to a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The smallest integer greater than or equal to the number.\r\n   *\r\n   * @example $ceil(5.5) // 6\r\n   * @example $ceil(5.1) // 6\r\n   */\n  $ceil: function $ceil(args, vars) {\n    var number = expry(args, vars);\n    assert(number, [isNumber], \"The $ceil operator requires a number as argument.\");\n    return Math.ceil(number);\n  },\n  /**\r\n   * Divides one number by another.\r\n   *\r\n   * @param args The dividend and divisor (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The result of dividing the dividend by the divisor.\r\n   *\r\n   * @example $divide([10, 2]) // 5\r\n   * @example $divide([10, 3]) // 3.3333333333333335\r\n   */\n  $divide: function $divide(args, vars) {\n    var number1 = expry(args[0], vars);\n    assert(number1, [isNumber], \"The $divide operator requires numbers as arguments.\");\n    var number2 = expry(args[1], vars);\n    assert(number2, [isNumber], \"The $divide operator requires numbers as arguments.\");\n    return number1 / number2;\n  },\n  /**\r\n   * Raises Euler's number to the specified exponent.\r\n   *\r\n   * @param args The number (expression evaluating to a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns Euler's number raised to the specified power.\r\n   *\r\n   * @example $exp(1) // 2.718281828459045\r\n   * @example $exp(2) // 7.3890560989306495\r\n   */\n  $exp: function $exp(args, vars) {\n    var number = expry(args, vars);\n    assert(number, [isNumber], \"The $exp operator requires a number as argument.\");\n    return Math.exp(number);\n  },\n  /**\r\n   * Returns the largest integer less than or equal to the specified number.\r\n   *\r\n   * @param args The number (expression evaluating to a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The largest integer less than or equal to the number.\r\n   *\r\n   * @example $floor(5.5) // 5\r\n   * @example $floor(5.1) // 5\r\n   */\n  $floor: function $floor(args, vars) {\n    var number = expry(args, vars);\n    assert(number, [isNumber], \"The $floor operator requires a number as argument.\");\n    return Math.floor(number);\n  },\n  /**\r\n   * Returns the natural logarithm of a number.\r\n   *\r\n   * @param args The number (expression evaluating to a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The natural logarithm of the number.\r\n   *\r\n   * @example $ln(1) // 0\r\n   * @example $ln(2.718281828459045) // 1\r\n   */\n  $ln: function $ln(args, vars) {\n    var number = expry(args, vars);\n    assert(number, [isNumber], \"The $ln operator requires a number as argument.\");\n    return Math.log(number);\n  },\n  /**\r\n   * Returns the logarithm of a number in a specified base.\r\n   *\r\n   * @param args The number and base (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The logarithm of the number in the specified base.\r\n   *\r\n   * @example $log([10, 10]) // 1\r\n   * @example $log([100, 10]) // 2\r\n   */\n  $log: function $log(args, vars) {\n    var number1 = expry(args[0], vars);\n    assert(number1, [isNumber], \"The $log operator requires numbers as arguments.\");\n    var number2 = expry(args[1], vars);\n    assert(number2, [isNumber], \"The $log operator requires numbers as arguments.\");\n    return Math.log(number1) / Math.log(number2);\n  },\n  /**\r\n   * Returns the base 10 logarithm of a number.\r\n   *\r\n   * @param args The number (expression evaluating to a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The base 10 logarithm of the number.\r\n   *\r\n   * @example $log10(1) // 0\r\n   * @example $log10(10) // 1\r\n   */\n  $log10: function $log10(args, vars) {\n    var number = expry(args, vars);\n    assert(number, [isNumber], \"The $log10 operator requires a number as argument.\");\n    return Math.log10(number);\n  },\n  /**\r\n   * Returns the remainder of dividing one number by another.\r\n   *\r\n   * @param args The dividend and divisor (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The remainder of dividing the dividend by the divisor.\r\n   *\r\n   * @example $mod([10, 3]) // 1\r\n   * @example $mod([10, 2]) // 0\r\n   */\n  $mod: function $mod(args, vars) {\n    var number1 = expry(args[0], vars);\n    assert(number1, [isNumber], \"The $mod operator requires numbers as arguments.\");\n    var number2 = expry(args[1], vars);\n    assert(number2, [isNumber], \"The $mod operator requires numbers as arguments.\");\n    return number1 % number2;\n  },\n  /**\r\n   * Multiplies numbers together.\r\n   *\r\n   * @param args The numbers (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The product of the numbers.\r\n   *\r\n   * @example $multiply([1, 2, 3]) // 6\r\n   */\n  $multiply: function $multiply(args, vars) {\n    return args.reduce(function (acc, expr) {\n      var number = expry(expr, vars);\n      assert(number, [isNumber], \"The $multiply operator requires numbers as arguments.\");\n      return acc * number;\n    }, 1);\n  },\n  /**\r\n   * Raises a number to the specified exponent.\r\n   *\r\n   * @param args The base and exponent (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The base raised to the specified power.\r\n   *\r\n   * @example $pow([2, 3]) // 8\r\n   * @example $pow([3, 2]) // 9\r\n   */\n  $pow: function $pow(args, vars) {\n    var number1 = expry(args[0], vars);\n    assert(number1, [isNumber], \"The $pow operator requires numbers as arguments.\");\n    var number2 = expry(args[1], vars);\n    assert(number2, [isNumber], \"The $pow operator requires numbers as arguments.\");\n    return Math.pow(number1, number2);\n  },\n  /**\r\n   * Rounds a number to the nearest integer.\r\n   *\r\n   * @param args The number and the number of decimal places (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The number rounded to the nearest number with the specified number of decimal places.\r\n   *\r\n   * @example $round([5.5, 0]) // 6\r\n   * @example $round([5.5, 1]) // 5.5\r\n   */\n  $round: function $round(args, vars) {\n    var number = expry(args[0], vars);\n    assert(number, [isNumber], \"The $round operator requires numbers as arguments.\");\n    var places = expry(args[1], vars);\n    assert(places, [isNumber], \"The $round operator requires numbers as arguments.\");\n    var factor = Math.pow(10, places);\n    return Math.round(number * factor) / factor;\n  },\n  /**\r\n   * Returns the square root of a number.\r\n   *\r\n   * @param args The number (expression evaluating to a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The square root of the number.\r\n   *\r\n   * @example $sqrt(4) // 2\r\n   * @example $sqrt(9) // 3\r\n   */\n  $sqrt: function $sqrt(args, vars) {\n    var number = expry(args, vars);\n    assert(number, [isNumber], \"The $sqrt operator requires a number as argument.\");\n    return Math.sqrt(number);\n  },\n  /**\r\n   * Subtracts one number from another.\r\n   *\r\n   * @param args The minuend and subtrahend (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The result of subtracting the subtrahend from the minuend.\r\n   *\r\n   * @example $subtract([5, 3]) // 2\r\n   * @example $subtract([3, 5]) // -2\r\n   */\n  $subtract: function $subtract(args, vars) {\n    var number1 = expry(args[0], vars);\n    assert(number1, [isNumber], \"The $subtract operator requires numbers as arguments.\");\n    var number2 = expry(args[1], vars);\n    assert(number2, [isNumber], \"The $subtract operator requires numbers as arguments.\");\n    return number1 - number2;\n  },\n  /**\r\n   * Truncates a number to the specified number of decimal places.\r\n   *\r\n   * @param args The number and the number of decimal places (expressions evaluating to numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The number truncated to the specified number of decimal places.\r\n   *\r\n   * @example $trunc(5.5) // 5\r\n   * @example $trunc(5.5, 1) // 5.5\r\n   */\n  $trunc: function $trunc(args, vars) {\n    var number = expry(args[0], vars);\n    assert(number, [isNumber], \"The $trunc operator requires numbers as arguments.\");\n    var places = expry(args[1], vars);\n    assert(places, [isNumber], \"The $trunc operator requires numbers as arguments.\");\n    var factor = Math.pow(10, places);\n    return Math.trunc(number * factor) / factor;\n  }\n};\n\nvar array = {\n  /**\r\n   * Returns the element at the specified index in an array.\r\n   *\r\n   * @param args The array and the index (expressions evaluating to an array and a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The element at the specified index in the array.\r\n   *\r\n   * @example $arrayElemAt([1, 2, 3], 0) // 1\r\n   * @example $arrayElemAt([1, 2, 3], 1) // 2\r\n   * @example $arrayElemAt([1, 2, 3], 3) // null\r\n   */\n  $arrayElemAt: function $arrayElemAt(args, vars) {\n    var array = expry(args[0], vars);\n    assert(array, [isArray], \"The $arrayElemAt operator requires an array as the first argument.\");\n    var index = expry(args[1], vars);\n    assert(index, [isNumber], \"The $arrayElemAt operator requires a number as the second argument.\");\n    if (index < 0 || index >= array.length) return null;\n    return array[index];\n  },\n  /**\r\n   * Returns the concatenation of arrays.\r\n   *\r\n   * @param args The arrays (expressions evaluating to arrays).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The concatenation of the arrays.\r\n   *\r\n   * @example $concatArrays([[1, 2], [3, 4]]) // [1, 2, 3, 4]\r\n   * @example $concatArrays([['hello', ' '], ['world']]) // ['hello', ' ', 'world']\r\n   * @example $concatArrays([['hello', ' '], [['world']]]) // ['hello', ' ', ['world']]\r\n   */\n  $concatArrays: function $concatArrays(args, vars) {\n    return args.reduce(function (acc, expr) {\n      var array = expry(expr, vars);\n      assert(array, [isArray], \"The $concatArrays operator requires arrays as arguments.\");\n      return acc.concat(array);\n    }, []);\n  },\n  /**\r\n   * Returns a subset of an array based on the specified condition.\r\n   *\r\n   * @param args The array, the condition, and the variable name (expressions evaluating to an array, a boolean, and a string).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The subset of the array.\r\n   *\r\n   * @example $filter({ input: [1, 2, 3, 4], as: 'num', cond: { $gt: ['$$num', 2] } }) // [3, 4]\r\n   */\n  $filter: function $filter(args, vars) {\n    var array = expry(args.input, vars);\n    assert(array, [isArray], \"The $filter operator requires an array as the input argument.\");\n    var as = expry(args.as, vars);\n    assert(as, [isString], \"The $filter operator requires a string as the as argument.\");\n    return array.filter(function (value) {\n      var _extends2;\n      return expry(args.cond, _extends({}, vars, (_extends2 = {}, _extends2[\"$\" + as] = value, _extends2)));\n    });\n  },\n  /**\r\n   * Returns a specified number of elements from the beginning of an array.\r\n   *\r\n   * @param args The array and the number of elements (expressions evaluating to an array and a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The specified number of elements from the beginning of the array.\r\n   *\r\n   * @example $firstN({ n: 2, input: [1, 2, 3] }) // [1, 2]\r\n   * @example $firstN({ n: 3, input: [1, 2] } }) // [1, 2]\r\n   * @example $firstN({ n: 2, input: [1] } }) // [1]\r\n   */\n  $firstN: function $firstN(args, vars) {\n    var array = expry(args.input, vars);\n    assert(array, [isArray], \"The $firstN operator requires an array as the input argument.\");\n    var n = expry(args.n, vars);\n    assert(n, [isNumber], \"The $firstN operator requires a number as the n argument.\");\n    return array.slice(0, n);\n  },\n  /**\r\n   * Returns a boolean indicating whether a value is in an array.\r\n   *\r\n   * @param args The value and the array (expressions evaluating to any type and an array).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns A boolean indicating whether the value is in the array.\r\n   *\r\n   * @example $in({ $in: [2, [1, 2, 3]] }) // true\r\n   * @example $in({ $in: [4, [1, 2, 3]] }) // false\r\n   * @example $in({ $in: ['world', ['hello', 'world']] }) // true\r\n   */\n  $in: function $in(args, vars) {\n    var value = expry(args[0], vars);\n    var array = expry(args[1], vars);\n    assert(array, [isArray], \"The $in operator requires an array as the second argument.\");\n    return array.includes(value);\n  },\n  /**\r\n   * Returns the index of the first occurrence of a value in an array. If the value is not in the array, it returns -1.\r\n   *\r\n   * @param args The value and the array (expressions evaluating to any type and an array).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The index of the first occurrence of the value in the array.\r\n   *\r\n   * @example $indexOfArray([['a', 'abc'], 'a']) // 0\r\n   * @example $indexOfArray([[1, 2], 5]) // -1\r\n   */\n  $indexOfArray: function $indexOfArray(args, vars) {\n    var array = expry(args[0], vars);\n    assert(array, [isArray], \"The $indexOfArray operator requires an array as the first argument.\");\n    var value = expry(args[1], vars);\n    return array.indexOf(value);\n  },\n  /**\r\n   * Returns a specified number of elements from the end of an array.\r\n   *\r\n   * @param args The array and the number of elements (expressions evaluating to an array and a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The specified number of elements from the end of the array.\r\n   *\r\n   * @example $lastN({ n: 2, input: [1, 2, 3] }) // [2, 3]\r\n   * @example $lastN({ n: 3, input: [1, 2] } }) // [1, 2]\r\n   * @example $lastN({ n: 2, input: [1] } }) // [1]\r\n   */\n  $lastN: function $lastN(args, vars) {\n    var array = expry(args.input, vars);\n    assert(array, [isArray], \"The $lastN operator requires an array as the input argument.\");\n    var n = expry(args.n, vars);\n    assert(n, [isNumber], \"The $lastN operator requires a number as the n argument.\");\n    return array.slice(-n);\n  },\n  /**\r\n   * Applies a specified expression to each element of an array and returns the result.\r\n   *\r\n   * @param args The array, the variable name, and the expression (expressions evaluating to an array, a string, and any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The result of applying the expression to each element of the array.\r\n   *\r\n   * @example $map({ input: [1, 2, 3], as: 'num', in: { $add: ['$$num', 1] } }) // [2, 3, 4]\r\n   * @example $map({ input: ['a', 'b'], as: 'str', in: { $toUpper: '$$str' } }) // ['A', 'B']\r\n   */\n  $map: function $map(args, vars) {\n    var array = expry(args.input, vars);\n    assert(array, [isArray], \"The $map operator requires an array as the input argument.\");\n    var as = expry(args.as, vars);\n    assert(as, [isString], \"The $map operator requires a string as the as argument.\");\n    return array.map(function (value) {\n      var _extends3;\n      return expry(args[\"in\"], _extends({}, vars, (_extends3 = {}, _extends3[\"$\" + as] = value, _extends3)));\n    });\n  },\n  /**\r\n   * Returns the largest values in an array.\r\n   *\r\n   * @param args The array and the number of values (expressions evaluating to an array and a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The largest values in the array.\r\n   *\r\n   * @example $maxN({ n: 2, input: [3, 7, 2, 4] } }) // [7, 4]\r\n   * @example $maxN({ n: 3, input: [3, 7, 2, 4] } }) // [7, 4, 3]\r\n   * @example $maxN({ n: 5, input: [3, 7, 2, 4] } }) // [7, 4, 3, 2]\r\n   */\n  $maxN: function $maxN(args, vars) {\n    var array = expry(args.input, vars);\n    assert(array, [isArrayOfType([isNumber]), isArrayOfType([isString])], \"The $maxN operator requires an array of numbers or an array of strings as the input argument.\");\n    var n = expry(args.n, vars);\n    assert(n, [isNumber], \"The $maxN operator requires a number as the n argument.\");\n    return array.sort(function (a, b) {\n      return b > a ? 1 : -1;\n    }).slice(0, n);\n  },\n  /**\r\n   * Returns the smallest values in an array.\r\n   *\r\n   * @param args The array and the number of values (expressions evaluating to an array and a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The smallest values in the array.\r\n   *\r\n   * @example $minN({ n: 2, input: [3, 7, 2, 4] } }) // [2, 3]\r\n   * @example $minN({ n: 3, input: [3, 7, 2, 4] } }) // [2, 3, 4]\r\n   * @example $minN({ n: 5, input: [3, 7, 2, 4] } }) // [2, 3, 4, 7]\r\n   */\n  $minN: function $minN(args, vars) {\n    var array = expry(args.input, vars);\n    assert(array, [isArrayOfType([isNumber]), isArrayOfType([isString])], \"The $minN operator requires an array of numbers or an array of strings as the input argument.\");\n    var n = expry(args.n, vars);\n    assert(n, [isNumber], \"The $minN operator requires a number as the n argument.\");\n    return array.sort(function (a, b) {\n      return a > b ? 1 : -1;\n    }).slice(0, n);\n  },\n  /**\r\n   * Accumulates the elements of an array using an expression and returns the result.\r\n   *\r\n   * @param args The array, the initial value, and the expression (expressions evaluating to an array, any type, and any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The result of accumulating the elements of the array.\r\n   *\r\n   * @example $reduce({ input: ['a', 'b', 'c'], initialValue: '', in: { $concat: ['$$value', '$$this'] } }) // 'abc'\r\n   * @example $reduce({ input: [1, 2, 3], initialValue: 0, in: { $add: ['$$value', '$$this'] } } }) // 6\r\n   */\n  $reduce: function $reduce(args, vars) {\n    var array = expry(args.input, vars);\n    assert(array, [isArray], \"The $reduce operator requires an array as the input argument.\");\n    var initialValue = expry(args.initialValue, vars);\n    return array.reduce(function (acc, value) {\n      return expry(args[\"in\"], _extends({}, vars, {\n        $value: acc,\n        $this: value\n      }));\n    }, initialValue);\n  },\n  /**\r\n   * Reverses the elements of an array.\r\n   *\r\n   * @param args The array (expression evaluating to an array).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The reversed array.\r\n   *\r\n   * @example $reverseArray([4, 2, 3]) // [3, 2, 4]\r\n   * @example $reverseArray(['a', 'c', 'b']) // ['b', 'c', 'a']\r\n   */\n  $reverseArray: function $reverseArray(args, vars) {\n    var array = expry(args, vars);\n    assert(array, [isArray], \"The $reverseArray operator requires an array as argument.\");\n    return array.reverse();\n  },\n  /**\r\n   * Returns the number of elements in an array.\r\n   *\r\n   * @param args The array (expression evaluating to an array).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The number of elements in the array.\r\n   *\r\n   * @example $size([1, 2, 3]) // 3\r\n   * @example $size(['a', 'b', 'c', 'd']) // 4\r\n   * @example $size([]) // 0\r\n   */\n  $size: function $size(args, vars) {\n    var array = expry(args, vars);\n    assert(array, [isArray], \"The $size operator requires an array as argument.\");\n    return array.length;\n  },\n  /**\r\n   * Returns a subset of an array.\r\n   *\r\n   * @param args The array, the starting index, and the number of elements (expressions evaluating to an array, a number, and a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The subset of the array.\r\n   *\r\n   * @example $slice([[1, 2, 3], 1, 1]) // [2]\r\n   * @example $slice([[1, 2, 3], 1, 2]) // [2, 3]\r\n   * @example $slice([[1, 2, 3], 1, 3]) // [2, 3]\r\n   * @example $slice([[1, 2, 3], 3, 2]) // []\r\n   */\n  $slice: function $slice(args, vars) {\n    var array = expry(args[0], vars);\n    assert(array, [isArray], \"The $slice operator requires an array as the first argument.\");\n    var position = expry(args[1], vars);\n    assert(position, [isNumber], \"The $slice operator requires a number as the second argument.\");\n    var n = expry(args[2], vars);\n    assert(n, [isNumber], \"The $slice operator requires a number as the third argument.\");\n    return array.slice(position, position + n);\n  },\n  /**\r\n   * Sorts the elements of an array.\r\n   *\r\n   * @param args The array and the expression to sort by (expressions evaluating to an array and a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The sorted array.\r\n   *\r\n   * @example $sortArray({ input: [3, 4, 2], sortBy: { $cmp: ['$$first', '$$second'] } }) // [2, 3, 4]\r\n   * @example $sortArray({ input: [3, 4, 2], sortBy: { $cmp: ['$$second', '$$first'] } }) // [4, 3, 2]\r\n   */\n  $sortArray: function $sortArray(args, vars) {\n    var array = expry(args.input, vars);\n    assert(array, [isArray], \"The $sortArray operator requires an array as the input argument.\");\n    return array.sort(function (a, b) {\n      var variables = _extends({}, vars, {\n        $first: a,\n        $second: b\n      });\n      var number = expry(args.sortBy, variables);\n      assert(number, [isNumber], \"The $sortArray operator requires a number as the sortBy argument.\");\n      return number;\n    });\n  }\n};\n\nvar _boolean = {\n  /**\r\n   * Evaluates one or more expressions and returns true if all of the expressions are true. Otherwise, it returns false.\r\n   *\r\n   * @param args An array of booleans (expressions evaluating to booleans).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if all of the expressions are true. Otherwise, false.\r\n   *\r\n   * @example $and([true, true, true]) // true\r\n   * @example $and([true, false, true]) // false\r\n   */\n  $and: function $and(args, vars) {\n    return args.every(function (expr) {\n      var _boolean2 = expry(expr, vars);\n      assert(_boolean2, [isBoolean], \"The $and operator requires booleans as arguments.\");\n      return _boolean2;\n    });\n  },\n  /**\r\n   * Evaluates a boolean and returns the opposite boolean value.\r\n   *\r\n   * @param args A boolean (expression evaluating to a boolean).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The opposite boolean value.\r\n   *\r\n   * @example $not(true) // false\r\n   * @example $not(false) // true\r\n   */\n  $not: function $not(args, vars) {\n    var _boolean3 = expry(args, vars);\n    assert(_boolean3, [isBoolean], \"The $not operator requires a boolean as argument.\");\n    return !_boolean3;\n  },\n  /**\r\n   * Evaluates one or more expressions and returns true if any of the expressions are true. Otherwise, it returns false.\r\n   *\r\n   * @param args An array of booleans (expressions evaluating to booleans).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if any of the expressions are true. Otherwise, false.\r\n   *\r\n   * @example $or([true, false, true]) // true\r\n   * @example $or([false, false, false]) // false\r\n   */\n  $or: function $or(args, vars) {\n    return args.some(function (expr) {\n      var _boolean4 = expry(expr, vars);\n      assert(_boolean4, [isBoolean], \"The $or operator requires booleans as arguments.\");\n      return _boolean4;\n    });\n  }\n};\n\nvar comparison = {\n  /**\r\n   * Compares two values and returns -1 if the first is less than the second, 1 if the first is greater than the second, and 0 if the two values are equal.\r\n   *\r\n   * @param args An array of two values (expressions evaluating to strings or numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The result of comparing the two values.\r\n   *\r\n   * @example $cmp([3, 5]) // -1\r\n   * @example $cmp([5, 3]) // 1\r\n   * @example $cmp([3, 3]) // 0\r\n   */\n  $cmp: function $cmp(args, vars) {\n    var values = [expry(args[0], vars), expry(args[1], vars)];\n    assert(values, [isArrayOfType([isNumber]), isArrayOfType([isString])], \"The $cmp operator requires two numbers or two strings as arguments.\");\n    return values[0] < values[1] ? -1 : values[0] > values[1] ? 1 : 0;\n  },\n  /**\r\n   * Compares two values and returns true if they are equal. Otherwise, it returns false.\r\n   *\r\n   * @param args An array of two values (expressions evaluating to any types).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the two values are equal. Otherwise, false.\r\n   *\r\n   * @example $eq([3, 3]) // true\r\n   * @example $eq(['hello', 'bye']) // false\r\n   */\n  $eq: function $eq(args, vars) {\n    var a = expry(args[0], vars);\n    var b = expry(args[1], vars);\n    return a === b;\n  },\n  /**\r\n   * Compares two values and returns true if the first is greater than the second. Otherwise, it returns false.\r\n   *\r\n   * @param args An array of two values (expressions evaluating to strings or numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the first value is greater than the second. Otherwise, false.\r\n   *\r\n   * @example $gt([5, 3]) // true\r\n   * @example $gt([3, 5]) // false\r\n   * @example $gt([3, 3]) // false\r\n   */\n  $gt: function $gt(args, vars) {\n    var a = expry(args[0], vars);\n    var b = expry(args[1], vars);\n    return a > b;\n  },\n  /**\r\n   * Compares two values and returns true if the first is greater than or equal to the second. Otherwise, it returns false.\r\n   *\r\n   * @param args An array of two values (expressions evaluating to strings or numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the first value is greater than or equal to the second. Otherwise, false.\r\n   *\r\n   * @example $gte([5, 3]) // true\r\n   * @example $gte([3, 5]) // false\r\n   * @example $gte([3, 3]) // true\r\n   */\n  $gte: function $gte(args, vars) {\n    var values = [expry(args[0], vars), expry(args[1], vars)];\n    assert(values, [isArrayOfType([isNumber]), isArrayOfType([isString])], \"The $gte operator requires two numbers or two strings as arguments.\");\n    return values[0] >= values[1];\n  },\n  /**\r\n   * Compares two values and returns true if the first is less than the second. Otherwise, it returns false.\r\n   *\r\n   * @param args An array of two values (expressions evaluating to strings or numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the first value is less than the second. Otherwise, false.\r\n   *\r\n   * @example $lt([3, 5]) // true\r\n   * @example $lt([5, 3]) // false\r\n   * @example $lt([3, 3]) // false\r\n   */\n  $lt: function $lt(args, vars) {\n    var values = [expry(args[0], vars), expry(args[1], vars)];\n    assert(values, [isArrayOfType([isNumber]), isArrayOfType([isString])], \"The $lt operator requires two numbers or two strings as arguments.\");\n    return values[0] < values[1];\n  },\n  /**\r\n   * Compares two values and returns true if the first is less than or equal to the second. Otherwise, it returns false.\r\n   *\r\n   * @param args An array of two values (expressions evaluating to strings or numbers).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the first value is less than or equal to the second. Otherwise, false.\r\n   *\r\n   * @example $lte([3, 5]) // true\r\n   * @example $lte([5, 3]) // false\r\n   * @example $lte([3, 3]) // true\r\n   */\n  $lte: function $lte(args, vars) {\n    var values = [expry(args[0], vars), expry(args[1], vars)];\n    assert(values, [isArrayOfType([isNumber]), isArrayOfType([isString])], \"The $lte operator requires two numbers or two strings as arguments.\");\n    return values[0] <= values[1];\n  },\n  /**\r\n   * Compares two values and returns true if they are not equal. Otherwise, it returns false.\r\n   *\r\n   * @param args An array of two values (expressions evaluating to any types).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the two values are not equal. Otherwise, false.\r\n   *\r\n   * @example $ne([3, 3]) // false\r\n   * @example $ne(['hello', 'bye']) // true\r\n   */\n  $ne: function $ne(args, vars) {\n    var a = expry(args[0], vars);\n    var b = expry(args[1], vars);\n    return a !== b;\n  }\n};\n\nvar conditional = {\n  /**\r\n   * Evaluates a boolean expression to return one of the two specified return expressions.\r\n   *\r\n   * @param args The condition, the value if true, and the value if false (expressions evaluating to a boolean, any type, and any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The 'then' value if the condition is true. Otherwise, the 'else' value.\r\n   *\r\n   * @example $cond({ if: true, then: 'yes', else: 'no' }) // 'yes'\r\n   * @example $cond({ if: false, then: 'yes', else: 'no' }) // 'no'\r\n   */\n  $cond: function $cond(args, vars) {\n    var condition = expry(args[\"if\"], vars);\n    assert(condition, [isBoolean], \"The $cond operator requires a boolean as the if argument.\");\n    return condition ? expry(args.then, vars) : expry(args[\"else\"], vars);\n  },\n  /**\r\n   * Evaluates expressions for null values and returns the first non-null expression's value. Otherwise, it returns the last expression's value.\r\n   *\r\n   * @param args The expressions (expressions evaluating to any types).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The first non-null expression's value. Otherwise, the last expression's value.\r\n   *\r\n   * @example $ifNull([null, 'hello', 'bye']) // 'hello'\r\n   * @example $ifNull([null, null, 'bye']) // 'bye'\r\n   * @example $ifNull([null, null, null]) // null\r\n   */\n  $ifNull: function $ifNull(args, vars) {\n    for (var _iterator = _createForOfIteratorHelperLoose(args), _step; !(_step = _iterator()).done;) {\n      var arg = _step.value;\n      var value = expry(arg, vars);\n      if (value !== null) return value;\n    }\n    return expry(args[args.length - 1], vars);\n  },\n  /**\r\n   * Evaluates a series of case expressions. When it finds an expression which evaluates to true, it returns the value of the corresponding expression. If no expression is true, it returns the value of the default expression.\r\n   *\r\n   * @param args The branches and the default value (expressions evaluating to booleans and any types).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The value of the first true expression. Otherwise, the default value.\r\n   *\r\n   * @example $switch({ branches: [{ case: false, then: 1 }, { case: true, then: 2 }], default: 3 } }) // 2\r\n   * @example $switch({ branches: [{ case: false, then: 1 }, { case: false, then: 2 }], default: 3 } }) // 3\r\n   */\n  $switch: function $switch(args, vars) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(args.branches), _step2; !(_step2 = _iterator2()).done;) {\n      var branch = _step2.value;\n      var condition = expry(branch[\"case\"], vars);\n      assert(condition, [isBoolean], \"The $switch operator requires booleans as case arguments.\");\n      if (condition) return expry(branch.then, vars);\n    }\n    return expry(args[\"default\"], vars);\n  }\n};\n\nvar object = {\n  /**\r\n   * Gets the value of a field in an object. If the field does not exist, it returns null.\r\n   *\r\n   * @param args The field and the object (expressions evaluating to a string and an object).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The value of the field.\r\n   *\r\n   * @example $getField({ field: 'qty', input: { item: 'apple', qty: 25, price: 4.5 } }) // 25\r\n   */\n  $getField: function $getField(args, vars) {\n    var field = expry(args.field, vars);\n    assert(field, [isString], \"The $getField operator requires a string as the field argument.\");\n    var input = expry(args.input, vars);\n    assert(input, [isObject], \"The $getField operator requires an object as the input argument.\");\n    if (field in input) return input[field];\n    return null;\n  },\n  /**\r\n   * Merges objects into a single object.\r\n   *\r\n   * @param args The objects (expressions evaluating to objects).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The merged object.\r\n   *\r\n   * @example $mergeObjects([{ item: 'apple', qty: 5, price: 2.5 }, { qty: 10, price: 1.2, sale: true }]) // { item: 'apple', qty: 10, price: 1.2, sale: true }\r\n   */\n  $mergeObjects: function $mergeObjects(args, vars) {\n    return args.reduce(function (acc, arg) {\n      var object = expry(arg, vars);\n      assert(object, [isObject], \"The $mergeObjects operator requires objects as arguments.\");\n      return _extends({}, acc, object);\n    }, {});\n  },\n  /**\r\n   * Sets a field in an object to a specified value.\r\n   *\r\n   * @param args The field, the object, and the value (expressions evaluating to a string, an object, and any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The object with the field set to the value.\r\n   *\r\n   * @example $setField({ field: 'item', input: { qty: 25, price: 4.5 }, value: 'apple' }) // { item: 'apple', qty: 25, price: 4.5 }\r\n   */\n  $setField: function $setField(args, vars) {\n    var _extends2;\n    var field = expry(args.field, vars);\n    assert(field, [isString], \"The $setField operator requires a string as the field argument.\");\n    var input = expry(args.input, vars);\n    assert(input, [isObject], \"The $setField operator requires an object as the input argument.\");\n    var value = expry(args.value, vars);\n    return _extends({}, input, (_extends2 = {}, _extends2[field] = value, _extends2));\n  }\n};\n\nvar string = {\n  /**\r\n   * Concatenates strings together.\r\n   *\r\n   * @param args The strings (expressions evaluating to strings).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The result of concatenating the strings.\r\n   *\r\n   * @example $concat(['hello', ' ', 'world']) // 'hello world'\r\n   */\n  $concat: function $concat(args, vars) {\n    return args.map(function (arg) {\n      var string = expry(arg, vars);\n      assert(string, [isString], \"The $concat operator requires strings as arguments.\");\n      return string;\n    }).join(\"\");\n  },\n  /**\r\n   * Removes whitespace from the beginning of a string.\r\n   *\r\n   * @param args The string (expression evaluating to a string).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The string with the whitespace removed from the beginning.\r\n   *\r\n   * @example $ltrim('  hello') // 'hello'\r\n   */\n  $ltrim: function $ltrim(args, vars) {\n    var string = expry(args, vars);\n    assert(string, [isString], \"The $ltrim operator requires a string as argument.\");\n    return string.replace(/^\\s+/, \"\");\n  },\n  /**\r\n   * Performs a regular expression and returns true if there is a match. Otherwise, it returns false.\r\n   *\r\n   * @param args A string and a regular expression (expressions evaluating to strings).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns A boolean indicating if there is a match.\r\n   *\r\n   * @example $regexMatch(['hello', '/ell/']) // true\r\n   * @example $regexMatch(['hello', '/bye/']) // false\r\n   */\n  $regexMatch: function $regexMatch(args, vars) {\n    var string = expry(args[0], vars);\n    assert(string, [isString], \"The $regexMatch operator requires a string as the first argument.\");\n    var regex = expry(args[1], vars);\n    assert(regex, [isString], \"The $regexMatch operator requires a string as the second argument.\");\n    return string.match(regex) !== null;\n  },\n  /**\r\n   * Removes whitespace from the end of a string.\r\n   *\r\n   * @param args The string (expression evaluating to a string).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The string with the whitespace removed from the end.\r\n   *\r\n   * @example $rtrim('hello  ') // 'hello'\r\n   */\n  $rtrim: function $rtrim(args, vars) {\n    var string = expry(args, vars);\n    assert(string, [isString], \"The $rtrim operator requires a string as argument.\");\n    return string.replace(/\\s+$/, \"\");\n  },\n  /**\r\n   * Divides a string into an array of substrings based on a delimiter.\r\n   *\r\n   * @param args A string and a delimiter (expressions evaluating to strings).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns {string[]} The array of substrings.\r\n   *\r\n   * @example $split(['June-15-2013', '-']) // ['June', '15', '2013']\r\n   * @example $split(['hello world', ' ']) // ['hello', 'world']\r\n   */\n  $split: function $split(args, vars) {\n    var string = expry(args[0], vars);\n    assert(string, [isString], \"The $split operator requires a string as the first argument.\");\n    var delimiter = expry(args[1], vars);\n    assert(delimiter, [isString], \"The $split operator requires a string as the second argument.\");\n    return string.split(delimiter);\n  },\n  /**\r\n   * Returns the length of a string.\r\n   *\r\n   * @param args The string (expression evaluating to a string).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The length of the string.\r\n   *\r\n   * @example $strLen('hello') // 5\r\n   */\n  $strLen: function $strLen(args, vars) {\n    var string = expry(args, vars);\n    assert(string, [isString], \"The $strLen operator requires a string as argument.\");\n    return string.length;\n  },\n  /**\r\n   * Returns a substring of a string.\r\n   *\r\n   * @param args The string, the starting index, and the number of characters (expressions evaluating to a string, a number, and a number).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The substring of the string.\r\n   *\r\n   * @example $substr(['hello', 0, 2]) // 'he'\r\n   */\n  $substr: function $substr(args, vars) {\n    var string = expry(args[0], vars);\n    assert(string, [isString], \"The $substr operator requires a string as the first argument.\");\n    var start = expry(args[1], vars);\n    assert(start, [isNumber], \"The $substr operator requires a number as the second argument.\");\n    var length = expry(args[2], vars);\n    assert(length, [isNumber], \"The $substr operator requires a number as the third argument.\");\n    return string.substring(start, start + length);\n  },\n  /**\r\n   * Returns the string converted to lowercase.\r\n   *\r\n   * @param args The string (expression evaluating to a string).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The string converted to lowercase.\r\n   *\r\n   * @example $toLower('Marti Serra') // 'marti serra'\r\n   */\n  $toLower: function $toLower(args, vars) {\n    var string = expry(args, vars);\n    assert(string, [isString], \"The $toLower operator requires a string as argument.\");\n    return string.toLowerCase();\n  },\n  /**\r\n   * Removes whitespace from the beginning and end of a string.\r\n   *\r\n   * @param args The string (expression evaluating to a string).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The string with the whitespace removed from the beginning and end.\r\n   *\r\n   * @example $trim('  hello  ') // 'hello'\r\n   */\n  $trim: function $trim(args, vars) {\n    var string = expry(args, vars);\n    assert(string, [isString], \"The $trim operator requires a string as argument.\");\n    return string.trim();\n  },\n  /**\r\n   * Returns the string converted to uppercase.\r\n   *\r\n   * @param args The string (expression evaluating to a string).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The string converted to uppercase.\r\n   *\r\n   * @example $toUpper('Marti Serra') // 'MARTI SERRA'\r\n   */\n  $toUpper: function $toUpper(args, vars) {\n    var string = expry(args, vars);\n    assert(string, [isString], \"The $toUpper operator requires a string as argument.\");\n    return string.toUpperCase();\n  }\n};\n\nvar type = {\n  /**\r\n   * Returns true if the value is a boolean. Otherwise, it returns false.\r\n   *\r\n   * @param args The value (expression evaluating to any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the value is a boolean. Otherwise, false.\r\n   *\r\n   * @example $isBoolean(false) // true\r\n   * @example $isBoolean(5) // false\r\n   * @example $isBoolean('hello') // false\r\n   */\n  $isBoolean: function $isBoolean(args, vars) {\n    var value = expry(args, vars);\n    return typeof value === \"boolean\";\n  },\n  /**\r\n   * Returns true if the value is a number. Otherwise, it returns false.\r\n   *\r\n   * @param args The value (expression evaluating to any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the value is a number. Otherwise, false.\r\n   *\r\n   * @example $isNumber(5) // true\r\n   * @example $isNumber(true) // false\r\n   * @example $isNumber('hello') // false\r\n   */\n  $isNumber: function $isNumber(args, vars) {\n    var value = expry(args, vars);\n    return typeof value === \"number\";\n  },\n  /**\r\n   * Returns true if the value is a string. Otherwise, it returns false.\r\n   *\r\n   * @param args The value (expression evaluating to any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns True if the value is a string. Otherwise, false.\r\n   *\r\n   * @example $isString('hello') // true\r\n   * @example $isString(5) // false\r\n   * @example $isString(true) // false\r\n   */\n  $isString: function $isString(args, vars) {\n    var value = expry(args, vars);\n    return typeof value === \"string\";\n  },\n  /**\r\n   * Converts a value to a boolean.\r\n   *\r\n   * @param args The value (expression evaluating to any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The converted value.\r\n   *\r\n   * @example $toBoolean('hello') // true\r\n   * @example $toBoolean('') // false\r\n   * @example $toBoolean(5) // true\r\n   * @example $toBoolean(0) // false\r\n   */\n  $toBoolean: function $toBoolean(args, vars) {\n    var value = expry(args, vars);\n    return Boolean(value);\n  },\n  /**\r\n   * Converts a value to a number. If the value cannot be converted, it returns null.\r\n   *\r\n   * @param args The value (expression evaluating to any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The converted value.\r\n   *\r\n   * @example $toNumber('5') // 5\r\n   * @example $toNumber('hello') // NaN\r\n   */\n  $toNumber: function $toNumber(args, vars) {\n    var value = expry(args, vars);\n    return Number(value);\n  },\n  /**\r\n   * Converts a value to a string.\r\n   *\r\n   * @param args The value (expression evaluating to any type).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The converted value.\r\n   *\r\n   * @example $toString(5) // '5'\r\n   * @example $toString(true) // 'true'\r\n   */\n  $toString: function $toString(args, vars) {\n    var value = expry(args, vars);\n    return String(value);\n  }\n};\n\nvar variable = {\n  /**\r\n   * Binds variables for use in the specified expression, and returns the result of the expression.\r\n   *\r\n   * @param args The variables and the expression (expressions evaluating to any types).\r\n   * @param vars The variables.\r\n   *\r\n   * @returns The result of the expression.\r\n   *\r\n   * @example $let({ vars: { age: 24 }, in: { isAdult: { $gte: ['$$age', 18] } } }) // { isAdult: true }\r\n   */\n  $let: function $let(args, vars) {\n    var variables = Object.fromEntries(Object.entries(args.vars).map(function (_ref) {\n      var key = _ref[0],\n        value = _ref[1];\n      return [\"$\" + key, expry(value, vars)];\n    }));\n    return expry(args[\"in\"], _extends({}, vars, variables));\n  }\n};\n\nvar operations = /*#__PURE__*/_extends({}, arithmetic, array, _boolean, comparison, conditional, object, string, type, variable);\n\n/**\r\n * It evaluates the expression with the given variables.\r\n *\r\n * @param expr The expression.\r\n * @param vars The variables to evaluate the expression with.\r\n *\r\n * @returns The result of the expression.\r\n */\nfunction expry(expr, vars) {\n  if (vars === void 0) {\n    vars = {};\n  }\n  if (isArr(expr)) return evalArr(expr, vars);\n  if (isObj(expr)) return evalObj(expr, vars);\n  if (isStr(expr)) return evalStr(expr, vars);\n  return expr;\n}\nfunction isArr(expr) {\n  return Array.isArray(expr);\n}\nfunction evalArr(expr, vars) {\n  return expr.map(function (expression) {\n    return expry(expression, vars);\n  });\n}\nfunction isObj(expr) {\n  return typeof expr === \"object\" && !Array.isArray(expr) && expr !== null;\n}\nfunction evalObj(expr, vars) {\n  if (isOperator(expr)) return evalOperator(expr, vars);\n  return evalObjValue(expr, vars);\n}\nfunction isOperator(expr) {\n  var keys = Object.keys(expr);\n  if (keys.length === 1) return keys[0] in operations;\n  return false;\n}\nfunction evalOperator(expr, vars) {\n  var key = Object.keys(expr)[0];\n  var operator = operations[key];\n  return operator(expr[key], vars);\n}\nfunction evalObjValue(expr, vars) {\n  return Object.fromEntries(Object.entries(expr).map(function (_ref) {\n    var key = _ref[0],\n      expr = _ref[1];\n    return [evalStrValue(key), expry(expr, vars)];\n  }));\n}\nfunction isStr(expr) {\n  return typeof expr === \"string\";\n}\nfunction evalStr(expr, vars) {\n  if (isVariable(expr)) return evalVariable(expr, vars);\n  return evalStrValue(expr);\n}\nfunction isVariable(expr) {\n  return expr.startsWith(\"$\");\n}\nfunction evalVariable(expr, vars) {\n  var parts = expr.slice(1).split(\".\");\n  return parts.reduce(function (acc, key) {\n    if (isObj(acc) && key in acc) return acc[key];\n    if (isArr(acc) && key in acc) return acc[Number(key)];\n    return null;\n  }, vars);\n}\nfunction evalStrValue(expr) {\n  if (expr.startsWith(\"#\")) return expr.slice(1);\n  return expr;\n}\n\n\n//# sourceMappingURL=expry.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/expry/dist/expry.esm.js\n");

/***/ })

};
;